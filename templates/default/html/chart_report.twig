{% extends "html/chart_page.twig" %}

{% block content %}
	{% for chart in Charts %}
	<div id='chart_div_{{chart.num}}' style='{% if chart.width %}width:{{chart.width}};{% endif %}{% if chart.height %}height:{{chart.height}};{% endif %}'></div>
	{% endfor %}
	
	<script type="text/javascript">
	function drawCharts() {
		{% for chart in Charts %}
			var data_{{chart.num}} = new google.visualization.DataTable();
					
			{% for key,value in chart.datatypes %}
			data_{{chart.num}}.addColumn("{{value}}","{{chart.Rows[0].values[key].key}}");
			{% endfor %}
		
			var rows = [
				{% for row in chart.Rows %}[
					{% for value in row.values %}
						{%- if value.datatype == "date" or value.datatype == "datetime" -%}
						new Date("{{ value.getValue()|replace({'\\':'\\\\','"':'\\"' })|raw }}")
						{%- elseif value.datatype == "timeofday" -%}
						[{{ value.getValue()|slice(0,2) }}, {{ value.getValue()|slice(3,2) }}, {{ value.getValue()|slice(6,2) }}, 0]
						{%- elseif value.datatype == "null" -%}
						null
						{%- elseif value.datatype == "number" -%}
						{{ value.getValue() }}
						{%- else -%}
						"{{ value.getValue()|replace({'\\':'\\\\','"':'\\"' })|raw }}"
						{%- endif %}
						{%- if not loop.last %},{% endif -%}
					{% endfor %}
					
				]{% if not loop.last %},{% endif %}

				{% endfor %}];

		
			data_{{chart.num}}.addRows(rows);

            // create columns array
            var columns_{{chart.num}} = [];
            var series_{{chart.num}} = {};
            for (var i = 0; i < data_{{chart.num}}.getNumberOfColumns(); i++) {
                columns_{{chart.num}}.push(i);
                if (i > 0) {
                    series_{{chart.num}}[i - 1] = {};
                }
            }

            var options_{{chart.num}} = {
				title: '{{chart.title}}',
				{% if chart.markers %}
					displayMode: 'markers',
					colorAxis: {colors: ['blue', 'red']},
					sizeAxis: {minValue: 1,  maxSize:  10},
				{% endif %}
				displayAnnotations: true,
                series: series_{{chart.num}},
				colors: [],
				wmode: 'transparent'
			};

        {% if chart.options %}
        {% for k,v in chart.options %}
            options_{{ chart.num}}["{{ k }}"] = {{ v|json_encode|raw }};
        {% endfor %}
        {% endif %}
			
			{% for color in chart.colors %}
				options_{{chart.num}}.colors.push('{{color}}');
			{% endfor %}


			if(!options_{{chart.num}}.colors.length) {
				delete options_{{chart.num}}.colors;
			}

        {% if chart.type == "Timeline" %}
            var chart_{{chart.num}} = new links.Timeline(document.getElementById('chart_div_{{chart.num}}'));
        {% else %}
			var chart_{{chart.num}} = new google.visualization.{{chart.type}}(document.getElementById('chart_div_{{chart.num}}'));
        {% endif %}

            google.visualization.events.addListener(chart_{{chart.num}}, 'select', function () {
                select2hide(chart_{{chart.num}}, data_{{chart.num}}, options_{{chart.num}}, columns_{{chart.num}}, series_{{chart.num}});
            });

        {% if chart.type == "BarChart" %}
            google.visualization.events.addListener(chart_{{chart.num}}, 'ready', function () {
                    $('#chart_div_{{chart.num}}').find('text[text-anchor=end]').each(function () {
                        $(this).attr('x', 25);
                        $(this).attr('text-anchor', 'front');
                    });
            });
        {% endif %}
            chart_{{chart.num}}.draw(data_{{chart.num}}, options_{{chart.num}});
		{% endfor %}
	}

    function select2hide (chart, data, options, columns, series) {
        var sel = chart.getSelection();
        // if selection length is 0, we deselected an element
        if (sel.length > 0) {
            // if row is undefined, we clicked on the legend
            if (typeof sel[0].row === 'undefined') {
                var col = sel[0].column;
                if (columns[col] == col) {
                    // hide the data series
                    columns[col] = {
                        label: data.getColumnLabel(col),
                        type: data.getColumnType(col),
                        calc: function () {
                            return null;
                        }
                    };

                    // grey out the legend entry
                    series[col - 1].color = '#CCCCCC';
                } else {
                    // show the data series
                    columns[col] = col;
                    series[col - 1].color = null;
                }
                var view = new google.visualization.DataView(data);
                view.setColumns(columns);
                chart.draw(view, options);
            }
        }
    }

	google.setOnLoadCallback(drawCharts);
	</script>
{% endblock %}
